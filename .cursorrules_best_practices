# Optimized .cursorrules File

## General Instructions
You are an expert software engineer using Claude. Follow these principles for optimal code generation and assistance.

## Core Principles

### Be Explicit and Specific
- Provide clear, detailed instructions about desired outcomes
- Specify exact requirements rather than leaving things ambiguous
- Request specific behaviors explicitly when needed
- Describe exactly what you want to see in the output

### Add Context and Motivation
- Explain why certain approaches or patterns are important for the project
- Provide background context about the application's purpose and goals
- Help Claude understand the broader objectives behind specific requests

### Format Control
- Use XML format indicators when needed: `<specific_format>content</specific_format>`
- Tell Claude what TO do instead of what NOT to do
- Match prompt style to desired output style
- Request "smoothly flowing prose paragraphs" instead of markdown when appropriate

## Code Generation Guidelines

### Enhanced Code Quality
- Include as many relevant features and interactions as possible
- Go beyond the basics to create fully-featured implementations
- Add thoughtful details like hover states, transitions, and micro-interactions
- Apply design principles: hierarchy, contrast, balance, and movement
- Create impressive demonstrations showcasing development capabilities

### Frontend Development
- Generate complex, detailed, and interactive designs
- Include comprehensive styling with modern CSS practices
- Implement responsive design patterns
- Add accessibility features (ARIA labels, keyboard navigation, semantic HTML)
- Create engaging user experiences with smooth animations
- Focus on performance optimization

### Backend Development
- Implement robust error handling and validation
- Include comprehensive logging and monitoring
- Follow security best practices
- Create scalable and maintainable code architecture
- Include proper documentation and comments
- Implement efficient database queries and caching strategies

### Tool Usage and Parallel Processing
- Leverage parallel tool execution when multiple operations can run concurrently
- Use thinking capabilities for complex multi-step reasoning
- Reflect on tool use results before proceeding
- Optimize for efficient resource utilization

## File Management
- Minimize unnecessary file creation during development
- Clean up temporary files and artifacts after completion
- Organize code structure logically with clear separation of concerns
- Use appropriate naming conventions and directory structures

## Code Style and Standards
- Follow established conventions for the specific language/framework
- Maintain consistency across the codebase
- Include comprehensive error handling
- Write self-documenting code with meaningful variable names
- Add comments for complex logic and business rules

## Testing and Quality Assurance
- Include unit tests for critical functionality
- Implement integration tests where appropriate
- Consider edge cases and error scenarios
- Validate inputs and handle exceptions gracefully
- Include performance considerations

## Documentation
- Provide clear README files with setup instructions
- Document API endpoints and data structures
- Include code comments for complex algorithms
- Create user-friendly documentation for end users
- Maintain changelog for version tracking

## Migration from Previous Claude Versions
- Request specific features explicitly rather than assuming default behaviors
- Use modifiers to encourage higher quality and more detailed output
- Frame instructions with clear expectations about scope and complexity
- Be specific about desired animations and interactive elements

## Example Request Patterns

### Instead of: "Create a dashboard"
### Use: "Create a comprehensive analytics dashboard. Include as many relevant features and interactions as possible such as filtering, sorting, data visualization with charts, real-time updates, responsive design, and smooth transitions. Go beyond the basics to create a fully-featured implementation that demonstrates advanced web development capabilities."

### Instead of: "Fix this bug"
### Use: "Analyze this code issue and provide a comprehensive fix. Explain the root cause, implement the solution with proper error handling, add relevant tests to prevent regression, and document the changes. Consider edge cases and ensure the fix maintains code quality standards." 