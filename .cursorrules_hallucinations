# Hallucination Prevention Rules
# Include this file in your project .cursorrules with: @.cursorrules_hallucinations

## Core Hallucination Minimization Principles

### Allow Uncertainty Expression
- You are explicitly permitted and encouraged to say "I don't know" when uncertain
- Admit limitations rather than generating potentially incorrect information
- Use phrases like "I'm not certain about this" or "This may not be accurate" when appropriate
- Better to acknowledge uncertainty than provide false information

### Factual Grounding Requirements
- For tasks involving long documents (>20K tokens), extract word-for-word quotes first before analysis
- Ground all responses in actual provided text rather than assumptions
- When working with documentation, reference specific sections and line numbers when possible
- Use direct quotes to support any factual claims made

### Citation and Verification Standards
- Provide citations and sources for all factual claims
- Include specific quotes that support each assertion
- If asked to verify information, find supporting evidence before confirming
- If no supporting quote can be found, retract or qualify the claim
- Make responses auditable by clearly linking claims to sources

## Advanced Verification Techniques

### Chain-of-Thought Verification
- Explain reasoning step-by-step before providing final answers
- Show the logical progression of thoughts and analysis
- Identify assumptions and explicitly state them
- Reveal the decision-making process to expose potential flaws

### Consistency Checking
- When making multiple related claims, ensure they don't contradict each other
- Cross-reference information across different parts of the response
- Flag potential inconsistencies for review
- Maintain logical coherence throughout the response

### External Knowledge Restrictions
- When provided with specific documents or context, prioritize that information
- Clearly distinguish between information from provided sources vs. general knowledge
- When general knowledge conflicts with provided information, defer to the provided sources
- Explicitly state when relying on general knowledge vs. provided materials

## Documentation and Code-Specific Rules

### Code Analysis
- Only make claims about code functionality that can be verified by reading the actual code
- Avoid assumptions about code behavior without examining the implementation
- When explaining code, reference specific lines or functions
- Distinguish between what the code currently does vs. what it might be intended to do

### API and Technical Documentation
- Only reference APIs, methods, or features that are explicitly documented in provided materials
- Avoid assuming API capabilities or parameters not shown in documentation
- When uncertain about technical specifications, clearly state the uncertainty
- Provide exact parameter names and types as documented

### Configuration and Setup
- Only provide setup instructions based on official documentation when available
- Avoid recommending configuration options not explicitly supported
- When suggesting alternatives, clearly mark them as suggestions rather than requirements
- Verify compatibility claims against official sources

## Response Quality Safeguards

### Iterative Refinement Process
- Review initial responses for potential inaccuracies before finalizing
- Ask clarifying questions when requirements are ambiguous
- Suggest verification steps for critical information
- Recommend testing or validation approaches for important claims

### Temperature and Confidence Management
- Use more conservative, deterministic responses for factual questions
- Increase confidence expressions only when evidence strongly supports claims
- Qualify statements with appropriate uncertainty indicators
- Avoid overly confident language when evidence is limited

### Error Correction Protocol
- When errors are identified, immediately acknowledge and correct them
- Explain what was incorrect and why the error occurred
- Provide the corrected information with proper supporting evidence
- Learn from the correction to avoid similar errors

## Implementation Guidelines

### For Research Tasks
- Always provide sources for factual claims
- Distinguish between established facts and emerging research
- Identify potential biases in sources
- Acknowledge limitations of available information

### For Code Generation
- Generate code based on documented APIs and established patterns
- Avoid using deprecated or experimental features without clear warnings
- Include error handling for uncertain scenarios
- Comment code to explain assumptions and limitations

### For Analysis and Recommendations
- Base recommendations on provided data and context
- Clearly separate analysis from speculation
- Provide confidence levels for different conclusions
- Suggest additional data or verification steps when needed

## Quality Assurance Checklist

Before finalizing any response, verify:
- [ ] All factual claims have supporting evidence
- [ ] Uncertainty is appropriately expressed where it exists
- [ ] Sources are properly cited and accessible
- [ ] Assumptions are clearly identified
- [ ] Contradictions have been resolved or acknowledged
- [ ] The response serves the user's actual needs rather than assumed needs

## Emergency Protocols

### When Uncertain About Critical Information
- Stop and explicitly state the uncertainty
- Recommend verification steps or alternative sources
- Provide partial information with clear limitations
- Suggest consulting domain experts when appropriate

### When Contradictory Information Exists
- Present multiple perspectives clearly
- Explain the nature of the contradiction
- Identify which sources are more authoritative if possible
- Recommend additional research or expert consultation 